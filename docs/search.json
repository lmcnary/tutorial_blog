[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started With APIs in Python",
    "section": "",
    "text": "An API, which stands for Application Programming Interface, is a set of rules that allows different software applications to communicate with each other. It’s sort of like a messenger that takes your request, delivers it to another system, and brings back a response. Without APIs, a lot of what we do online would not be possible. For example: - The weather app on your phone fetches weather data from an API instead of measuring it itself. - Payment services like Paypal and Venmo use APIs so that online payments can be processed securely. - Google Maps has an API that allows developers for other apps to embed maps, calculate routes, or estimate travel times. APIs act as the bridge between applications, making it possible for them to share data and functionality in a consistent and structured way.\n\n\nIn this guide we will learn how to fetch data from a public API using Python’s requests library and print JSON responses. By the end of this tutorial, you will be able to:\n\nSet up your environment\nMake API requests using Python’s requests library\nInspect and use the returned data"
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "Getting Started With APIs in Python",
    "section": "",
    "text": "In this guide we will learn how to fetch data from a public API using Python’s requests library and print JSON responses. By the end of this tutorial, you will be able to:\n\nSet up your environment\nMake API requests using Python’s requests library\nInspect and use the returned data"
  },
  {
    "objectID": "index.html#set-up-your-environment",
    "href": "index.html#set-up-your-environment",
    "title": "Getting Started With APIs in Python",
    "section": "Set up Your Environment",
    "text": "Set up Your Environment\nTo get started with interacting with an API using Python, you will need to set your environment. This includes installing Python and installing the requests library.\nTo make sure you have Python installed, you can check by running the following command in your terminal or command prompt:\npython --version\nIf you don’t have Python installed, you can download it from the official website: python.org.\nNext, make sure you have the requests library installed. You can install it by running the following command:\npip install requests\nOnce installed, import it into your Python script\nimport requests"
  },
  {
    "objectID": "index.html#making-api-requests",
    "href": "index.html#making-api-requests",
    "title": "Getting Started With APIs in Python",
    "section": "Making API Requests",
    "text": "Making API Requests\nTo make a request to an API, you will need the API endpoint URL. This is the URL where the API is hosted and where you will send your requests. We will use a GET request to fetch data from the API. In this example, we are sending a get request to an API and printing the JSON response\nresponse = requests.get('https://my-json-server.typicode.com/typicode/demo/posts')\ndata = response.json()\nprint(data)\nThis request asks the API to return a list of posts. The response is then converted to JSON format and printed to the console. It will look like a Python dictionary and will contain fields such as “id” and “title”."
  },
  {
    "objectID": "index.html#inspecting-and-using-the-data",
    "href": "index.html#inspecting-and-using-the-data",
    "title": "Getting Started With APIs in Python",
    "section": "Inspecting and Using the Data",
    "text": "Inspecting and Using the Data\nThe API should return a JSON response that looks something like this:\n[\n  {\n    \"id\": 1,\n    \"title\": \"Post 1\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Post 2\"\n  },\n  {\n    \"id\": 3,\n    \"title\": \"Post 3\"\n  }\n]\nGetting the data is just the first step. Once you have the response, you can inspect and use it in your application. You can treat it just like a Python dictionary or list. For example, you can loop through this list and access and print each ID and title like this:\nfor post in data:\n    print(f\"Post ID: {post['id']}, Title: {post['title']}\")\nOutput:\nPost ID: 1, Title: Post 1\nPost ID: 2, Title: Post 2  \nPost ID: 3, Title: Post 3\nIn some of the more complex APIs, you may need to handle nested JSON arrays. For example:\n{\n  \"user\": {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"posts\": [\n      {\n        \"id\": 101,\n        \"title\": \"First Post\"\n      },\n      {\n        \"id\": 102,\n        \"title\": \"Second Post\"\n      }\n    ]\n  }\n}\nIf we wanted to access the titles of John Doe’s posts, we could do it like this:\nfor post in user_data['user']['posts']:\n    print(post['title'])\nUnderstanding how to navigate nested data structures is one of the key skills when working with APIs. ## Handling Errors and Status Codes When working with APIs, not every request will be successful. Maybe the endpoint is incorrect or the server is down. You can check the status code to see if your request was successful before working with the data.\nif response.status_code == 200:\n    print(\"Request was successful!\")\n    # now you can begin working with the data\nelse:\n    print(f\"Error: {response.status_code}\")\nThis kind of error handling will help you identify issues early and save time debugging later on."
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "Getting Started With APIs in Python",
    "section": "Conclusion",
    "text": "Conclusion\nAPIs are powerful tools that allow you to access and interact with data from all different kinds of services. By using Python’s requests library, you can easily make API requests and work with the returned data.\nNow it’s your turn! Your task is to: 1. Create a new Python script 2. Use the requests library to make a GET request to a public API of your choice (I challenge you to find one with nested data!) 3. Try checking the status code of your request 4. Print the JSON response to the console 5. Inspect the data and try to access specific fields inside the JSON response. Experiment with different APIs and see what kinds of data you can work with."
  }
]